#include <behaviors/rgbled_widget.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    quick-tap-ms = <175>;
    flavor = "tap-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";

        IME_ON {
            bindings = <&imeonoff LANGUAGE_2 LANGUAGE_1>;
            key-positions = <19 20>;
            layers = <0 1>;
        };

        win_mv_right {
            bindings = <&winmvright>;
            key-positions = <8 9>;
            slow-release;
            layers = <0 1>;
        };

        win_mv_left {
            bindings = <&winmvleft>;
            key-positions = <0 1>;
            slow-release;
            layers = <0 1>;
        };

        braces {
            bindings = <&brace 0 0>;
            key-positions = <2 1>;
            layers = <0 1>;
        };

        brackets {
            bindings = <&brack 0 0>;
            key-positions = <23 24>;
            layers = <0 1>;
        };

        parenthesis {
            bindings = <&paren 0 0>;
            key-positions = <11 12>;
            layers = <0 1>;
        };

        jis_ime_togle {
            bindings = <&kp LA(GRAVE)>;
            key-positions = <8 7>;
            layers = <0 1>;
        };

        find {
            bindings = <&kp LC(F)>;
            key-positions = <22 23>;
            layers = <0 1>;
        };

        paste {
            bindings = <&holdtap LG(V) LC(V)>;
            key-positions = <18 19>;
            layers = <0 1>;
        };

        dblsft {
            bindings = <&DBLSFT>;
            key-positions = <12 13>;
            layers = <0 1>;
        };
    };

    macros {
        DBLSFT: DBLSFT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT &kp LEFT_SHIFT>;
            label = "DBLSFT";
        };

        DBLCTL: DBLCTL {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp LCTRL>;
            label = "DBLCTL";
        };

        winmvright: winmvright {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI &kp RIGHT>,
                <&macro_release>,
                <&kp RIGHT &kp LEFT_WIN>;

            label = "WINMVRIGHT";
        };

        winmvleft: winmvleft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI &kp LEFT>,
                <&macro_release>,
                <&kp LEFT &kp LEFT_WIN>;

            label = "WINMVLEFT";
        };

        at: at {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp AT_SIGN>;
            label = "AT";
        };

        hash: hash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp HASH>;
            label = "HASH";
        };

        amp: amp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp AMPERSAND>;
            label = "AMP";
        };

        dollar: doller {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp DOLLAR>;
            label = "DOLLER";
        };

        backquote: backquote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp GRAVE>;
            label = "BACKQUOTE";
        };

        quote: quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp SINGLE_QUOTE>;
            label = "QUOTE";
        };

        doublequote: doublequote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp DOUBLE_QUOTES>;
            label = "DOUBLEQUOTE";
        };

        caret: caret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp CARET>;
            label = "CARET";
        };

        pipe: pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp PIPE>;
            label = "PIPE";
        };

        parenthesis: parenthesis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
            label = "PARENTHESIS";
        };

        brackets: brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "BRACKETS";
        };

        braces: braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "BRACES";
        };

        zen_parenthesis: zen_parenthesis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
            label = "ZEN_PARENTHESIS";
        };

        zen_brackets: zen_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "ZEN_BRACKETS";
        };

        zen_braces: zen_braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "ZEN_BRACES";
        };
    };

    behaviors {
        BSDEL: BSDEL {
            compatible = "zmk,behavior-mod-morph";
            label = "BSDEL";
            bindings = <&kp BSPC>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lt_bsdel: lt_bsdel {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_BSDEL";
            bindings = <&mo>, <&BSDEL>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            flavor = "tap-preferred";
        };

        imeonoff: imeonoff {
            compatible = "zmk,behavior-hold-tap";
            label = "IMEONOFF";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        holdtap: holdtap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        paren: paren {
            compatible = "zmk,behavior-hold-tap";
            label = "PAREN";
            bindings = <&zen_parenthesis>, <&parenthesis>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        brack: brack {
            compatible = "zmk,behavior-hold-tap";
            label = "BRACK";
            bindings = <&zen_brackets>, <&brackets>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        brace: brace {
            compatible = "zmk,behavior-hold-tap";
            label = "BRACE";
            bindings = <&zen_braces>, <&braces>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
&kp Q                         &kp W         &kp MINUS         &kp R      &holdtap LC(Z) Z                                      &holdtap LC(X) X  &kp D             &holdtap LG(E) E  &kp L                       &kp P
&kp I                         &kp T         &holdtap LC(A) A  &kp K      &kp G             &kp C_MUTE          &lt 6 ESC       &holdtap COLON H  &kp N             &kp O             &kp U                       &holdtap SEMI S
&mt LEFT_SHIFT SLASH          &kp F         &holdtap LC(C) C  &kp M      &kp B             &kp LANGUAGE_2      &kp LANGUAGE_1  &kp J             &holdtap LC(Y) Y  &holdtap LC(V) V  &holdtap EXCLAMATION COMMA  &holdtap QUESTION PERIOD
&holdtap LC(SPACE) LS(LC(M))  &kp LEFT_WIN  &kp LEFT_ALT      &mkp LCLK  &mt LSHIFT SPACE  &mt LCTRL TAB       &lt_bsdel 5 0   &lt 4 ENTER                                                                       &kp PRINTSCREEN
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans        &trans         &trans                      &trans  &trans     &trans  &trans     &trans
&trans  &trans  &trans        &trans         &trans  &trans      &trans  &trans  &trans     &trans  &trans     &trans
&trans  &trans  &kp LA(LEFT)  &kp LA(RIGHT)  &trans  &trans      &trans  &trans  &mkp LCLK  &mo 2   &mkp MCLK  &mkp RCLK
&trans  &trans  &trans        &trans         &mo 2   &mo 3       &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SNIPE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        NUMBER {
            bindings = <
&kp ASTERISK        &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS                                            &kp TILDE        &backquote  &quote        &doublequote  &caret
&kp SLASH           &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS             &kp LC(NUMBER_0)      &trans  &kp LEFT         &kp DOWN    &kp UP_ARROW  &kp RIGHT     &kp BACKSLASH
&kp NUMBER_0        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERCENT           &kp COMMA             &pipe   &kp EXCLAMATION  &at         &hash         &amp          &dollar
&kp K_CONTEXT_MENU  &DBLCTL       &DBLSFT       &mkp RCLK     &mt LEFT_SHIFT EQUAL  &mt LCTRL PERIOD      &trans  &trans                                                   &kp UNDER
            >;

            sensor-bindings = <&inc_dec_kp LC(MINUS) LC(PLUS)>;
        };

        FUNCTION {
            bindings = <
&kp LEFT_BRACE        &kp F7  &kp F8  &kp F9     &kp F12                                                       &kp INSERT  &kp DELETE     &kp PRINTSCREEN  &kp PAUSE_BREAK  &kp RIGHT_BRACE
&kp LEFT_PARENTHESIS  &kp F4  &kp F5  &kp F6     &kp F11           &kp LC(NUMBER_1)        &kp CAPSLOCK        &kp HOME    &kp PAGE_DOWN  &kp PAGE_UP      &kp END          &kp RIGHT_PARENTHESIS
&kp LEFT_BRACKET      &kp F1  &kp F2  &kp F3     &kp F10           &kp LC(LA(DELETE))      &kp LC(LS(ESCAPE))  &trans      &trans         &trans           &trans           &kp RIGHT_BRACKET
&trans                &trans  &trans  &mkp MCLK  &mt LSHIFT LC(Z)  &mt LCTRL LC(Y)         &trans              &trans                                                       &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        SYSTEM {
            bindings = <
&ind_bat      &trans        &trans        &ind_con      &out OUT_USB                          &out OUT_USB  &ind_con      &trans        &trans        &ind_bat
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR      &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans        &trans        &trans        &trans        &out OUT_BLE  &trans          &trans  &out OUT_BLE  &trans        &trans        &trans        &trans
&bootloader   &trans        &trans        &trans        &trans        &trans          &trans  &trans                                                  &bootloader
            >;
        };
    };
};
